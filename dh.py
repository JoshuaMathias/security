import sys
import os
import gmpy2
import binascii

# modular exponentiation
def modExp(x,exp,modValue):
    if (exp==0):
        return 1
    newX=modExp(x,exp/2,modValue)
    if (exp%2==0):
        return newX**2%modValue
    else:
        return x*newX**2%modValue


if __name__ == "__main__":
    # 63 bytes=504 bits
    p=int(binascii.hexlify(os.urandom(63)),16)
    while gmpy2.is_prime(p)==False or gmpy2.is_prime((p-1)/2)==False:
        p=int(binascii.hexlify(os.urandom(63)),16)

    s=int(binascii.hexlify(os.urandom(63)),16)
    g=5
    print "p: "+str(p)
    print "s: "+str(s)
    modResult=str(modExp(g,s,p))
    print 'g^s%p: '+modResult
    print '(g^t%p)^s%p: '+str(modExp(6994786238321007654424267548896589642703247158057712592559473749133217340548944039340163982808289865941823868956987361387107637162134591212588863624201,s,p))
    t=1998286638065473057944506344030256054916203227381748916180906390214373930105605405985818224246280726328877245115163209963634633681313092395058312190549

    print "check: "+str(modExp(modExp(g,t,p),s,p))

    p=20787236442207950610715243388898544921870939531888594558578808767108031111515955288310948363178673217996577745512644460522508849858103999198071843030307
    s=51194946426883147057998383503093335508302328241719452262487697932194626116882238815974954609114689365846605235048766209175320509791062601057309013040815
    clientNumber=18287643862152199080062071298329803873510029697095003335352915127596164867982900162415250896916103526846265197527726811521927574923976588222399544578068
    print "pass off result (g^t%p)^s%p: "+str(modExp(clientNumber,s,p))